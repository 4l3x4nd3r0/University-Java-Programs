package packDraw;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.Toolkit;
import java.awt.geom.Line2D;

import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.List;
import java.util.Optional;

import javax.swing.*;

/**
 *
 * @author Antal Tiberiu
 */
public class Draw1 extends javax.swing.JFrame {
    static Color penColor = new Color(0, 0, 0);
    static Stroke penWidth = new BasicStroke(0);
    double xmin, xmax, ymin, ymax;
    int brek = 1000;


    ArrayList<Double> X = new ArrayList<Double>();
    ArrayList<Double> Y = new ArrayList<Double>();
    ArrayList<Color> C = new ArrayList<Color>();
    ArrayList<Shape2D> Shape = new ArrayList<Shape2D>();

    /** Creates new form Draw1 */
    public Draw1() {
        //setUndecorated(true);
        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() { //GEN-BEGIN:initComponents

        setDefaultCloseOperation(javax.swing
                                      .WindowConstants
                                      .EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing
                                                                  .GroupLayout
                                                                  .Alignment
                                                                  .LEADING).addGap(0, 645, Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing
                                                                .GroupLayout
                                                                .Alignment
                                                                .LEADING).addGap(0, 428, Short.MAX_VALUE));

        pack();
    } //GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) { //GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        if ((xmin != xmax) && (ymin != ymax)) {
            ClearShape();
            compute1();
        }
    } //GEN-LAST:event_formComponentResized

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing
                                                                   .UIManager
                                                                   .getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing
                         .UIManager
                         .setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util
                .logging
                .Logger
                .getLogger(Draw1.class.getName())
                .log(java.util
                         .logging
                         .Level
                         .SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util
                .logging
                .Logger
                .getLogger(Draw1.class.getName())
                .log(java.util
                         .logging
                         .Level
                         .SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util
                .logging
                .Logger
                .getLogger(Draw1.class.getName())
                .log(java.util
                         .logging
                         .Level
                         .SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util
                .logging
                .Logger
                .getLogger(Draw1.class.getName())
                .log(java.util
                         .logging
                         .Level
                         .SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt
            .EventQueue
            .invokeLater(new Runnable() {
                public void run() {
                    new Draw1().setVisible(true);
                }
            });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    //


    public void setWHSizePixels(int w, int h) {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (dim.width - w) / 2;
        int y = (dim.height - h) / 2;

        // Move the window
        this.setLocation(x, y);
        this.setSize(w, h);
    }

    void setXYWHPixels(int x, int y, int w, int h) {
        this.setLocation(x, y);
        this.setSize(x, y);
    }

     Shape2D getLast() {
        if (Shape.size() > 0)
            return Shape.get(Shape.size() - 1);
        return null;
    }

    public void addPlotPoint(double x, double y, Color c) {
        X.add(x);
        Y.add(y);
        C.add(c);
    }

    public void addLine(int x1, int y1, int x2, int y2) {
        Shape2D s = new Shape2D(penColor, penWidth, false);
        s.Line(x1, y1, x2, y2);
        Shape.add(s);
        //getLast().Line(x1, y1, x2, y2);
    }

    public void addCircle(int x1, int y1, int r) {
        Shape2D s = new Shape2D(penColor, penWidth, false);
        s.Circle(x1, y1, r);
        Shape.add(s);
        //getLast().Circle(x1, y1, r);
    }

    public void setPenWidth(Stroke s) {
        penWidth = s;
    }

    public void addCircleFilled(int x1, int y1, int r) {
        Shape2D s = new Shape2D(penColor, penWidth, true);
        s.Circle(x1, y1, r);
        Shape.add(s);
    }

    public void addRectangle(int x1, int y1, int w, int h) {
        Shape2D s = new Shape2D(penColor, penWidth, false);
        s.Rectangle(x1, y1, w, h);
        Shape.add(s);
    }

    public void addRectangleFilled(int x1, int y1, int w, int h) {
        Shape2D s = new Shape2D(penColor, penWidth, true);
        s.Rectangle(x1, y1, w, h);
        Shape.add(s);
        //getLast().Rectangle(x1, y1, w, h);
    }

    public void setPenColor(Color c) {
        penColor = c;
    }

    public void setBreakAt(int b) {
        brek = b;
    }

    double getMin(ArrayList<Double> a) {
        Optional<Double> minValue = a.stream().reduce(Double::min);
        return minValue.get();
    }

    double getMax(ArrayList<Double> a) {
        Optional<Double> maxValue = a.stream().reduce(Double::max);
        return maxValue.get();
    }

    public void plot1() {
        xmin = getMin(X);
        xmax = getMax(X);
        ymin = getMin(Y);
        ymax = getMax(Y);
        System.out.printf("\n\nymin = %10.5f ymax = %10.5f\n\n", ymin, ymax);
        System.out.printf("\n\nxmin = %10.5f xmax = %10.5f\n\n", xmin, xmax);
        compute1();

        setVisible(true);
        repaint();
    }

    public void compute1() {
        int LX = this.getWidth();
        int LY = this.getHeight();

        int xp1, yp1, xp2, yp2;
        xp1 = (int) (scale(X.get(0), xmin, xmax) * (LX - 20) + 10);
        yp1 = (int) (scale(Y.get(0), ymin, ymax) * (LY - 50) + 10);
        for (int k = 1; k < X.size(); ++k) {
            //System.out.printf("%d) %f %f\n", k, x[k], y[k]);
            xp2 = (int) (scale(X.get(k), xmin, xmax) * (LX - 20) + 10);
            yp2 = (int) (scale(Y.get(k), ymin, ymax) * (LY - 50) + 10);
            if (k % brek == 0) {
                xp1 = xp2;
                yp1 = yp2;
            }
            penColor = C.get(k);
            addLine(xp1, LY - yp1, xp2, LY - yp2);
            xp1 = xp2;
            yp1 = yp2;
        }

        penColor = new Color(100, 100, 255);
        if (xmin * xmax < 0) {
            xp1 = (int) (scale(0, xmin, xmax) * (LX - 20) + 10);
            addLine(xp1, 0, xp1, LY);
        }
        if (ymin * ymax < 0) {
            yp1 = (int) (scale(0, ymin, ymax) * (LY - 50) + 10);
            addLine(0, LY - yp1, LX, LY - yp1);
        }

        /*
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {

                int xp1, yp1, xp2, yp2;
                xp1 = (int) (scale(X.get(0), xmin, xmax) * (LX - 20) + 10);
                yp1 = (int) (scale(Y.get(0), ymin, ymax) * (LY - 50) + 10);
                for (int k = 1; k < X.size(); ++k) {
                    //System.out.printf("%d) %f %f\n", k, x[k], y[k]);
                    xp2 = (int) (scale(X.get(k), xmin, xmax) * (LX - 20) + 10);
                    yp2 = (int) (scale(Y.get(k), ymin, ymax) * (LY - 50) + 10);
                    if (k % brek == 0) {
                        xp1 = xp2;
                        yp1 = yp2;
                    }
                    penColor = C.get(k);
                    addLine(xp1, LY - yp1, xp2, LY - yp2);
                    xp1 = xp2;
                    yp1 = yp2;
                }

                penColor = new Color(100,100,255);
                if (xmin * xmax < 0) {
                    xp1 = (int) (scale(0, xmin, xmax) * (LX - 20) + 10);
                    addLine(xp1, 0, xp1, LY);
                }
                if (ymin * ymax < 0) {
                    yp1 = (int) (scale(0, ymin, ymax) * (LY - 50) + 10);
                    addLine(0, LY-yp1, LX, LY-yp1);
                }

               // repaint();
            }
        });
*/
    }

    private void ClearShape() {
        if (!(Shape.isEmpty()))
            Shape.clear();
    }

    static double scale(double v, double vmin, double vmax) {
        return (v - vmin) / (vmax - vmin);
    }

    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2 = (Graphics2D) g;
        try {
            for (Shape2D s : Shape) {
                g2.setColor(s.penColor);
                g2.setStroke(s.penWidth);

                if (s.fill)
                    g2.fill(s.shape);
                else
                    g2.draw(s.shape);
            }
        } catch (ConcurrentModificationException e) {
        } catch (IndexOutOfBoundsException e) {
        }

    }


}
